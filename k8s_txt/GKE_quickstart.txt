1. Create cluster

2. Create service-account 

3. Encrypt service-account with ruby image
	- docker run -it -v ${pwd}:/app ruby:2.3 sh
	- gem install travis
	- travis login
	- travis encrypt-file service-account.json -r ddydeveloper/multi-k8s
	
4. Configure GKE console:
	- gcloud config set project k8s-ddy
	- gcloud config set compute/zone europe-north1-a	
	- gcloud container clusters get-credentials task-management-cluster
	
5. Set up helm for GKE
	- follow quick start guide "From script" section:
		- curl https://raw.githubusercontent.com/helm/helm/master/scripts/get > get_helm.sh
		- chmod 700 get_helm.sh
		- ./get_helm.sh
	- create tiller service-account: 
		kubectl create serviceaccount --namespace kube-system tiller
	- create tiller service-account admin role binding: 
		kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
	- init helm with tiller: 
		helm init --service-account tiller --upgrade
	
6. Set up ingress nginx with helm
	- helm install stable/nginx-ingress --name my-nginx --set rbac.create=true

7. Letsencrypt & cert-manager
	- install cert-manager: 
		helm install --name cert-manager --version v0.5.2 --namespace kube-system stable/cert-manager
	
8. Set up ELK:
	- helm repo add incubator https://kubernetes-charts-incubator.storage.googleapis.com/
	- helm repo update
	- kubectl create ns logging
	- helm install incubator/elasticsearch --namespace logging --name elasticsearch --set data.terminationGracePeriodSeconds=0
	- helm install --name fluentd --namespace logging stable/fluentd-elasticsearch --set elasticsearch.host=elasticsearch-client.logging.svc.cluster.local,elasticsearch.port=9200
	- helm install --name kibana --namespace logging stable/kibana --set env.ELASTICSEARCH_URL=http://elasticsearch-client.logging.svc.cluster.local:9200
	или 
	- helm install --name kibana --namespace logging stable/kibana --set image.tag=6.4.2 --set  env.ELASTICSEARCH_URL=http://elasticsearch-client.logging.svc.cluster.local:9200

9. Deploy apps 